#!/bin/bash
#
# This is helper script to restore a version into a PVC/PV.  It should be
# run a management workstation with access to the Kubernetes API.
#
# It requires kubectl and the necessary credentials to execute commands in
# the Benji K8s pod, create the PVC (if does not already exist) and start a
# pod in the target namespace.
#
# The namespace where the target PVC is located needs to enabled for dynamic
# provisioning of RBD volumes if the specified PVC and the corresponding PV
# does not already exist.
#
# If restoring into an existing PVC/PV the PV needs to at least the size
# of the version to be restored. If the PV is bigger than the version the
# the filesystem won't be resized automatically.
#

if [[ $# != 3 ]]; then
    echo "usage: $0 <version> <restore-pvc-namespace> <restore-pvc-name>"
    exit 1
fi

VERSION="$1"
RESTORE_NS="$2"
RESTORE_PVC="$3"

: ${BENJI_K8S_NS:=ceph}

BENJI_K8S_POD="$(kubectl get pod -n "$BENJI_K8S_NS" -l benji-backup.me/component=benji -o 'jsonpath={.items[0].metadata.name}')"
[[ ! $BENJI_K8S_POD ]] && { echo 'Benji K8s pod not found.' 1>&2; exit 1; }

VERSION_SIZE="$(kubectl exec -n "$BENJI_K8S_NS" "$BENJI_K8S_POD" -c benji -- \
		benji --log-level ERROR -m ls 'uid == "'"$VERSION"'"' | jq '.versions[0].size')"
[[ ! $VERSION_SIZE ]] && { echo "Size of $VERSION could not be determined." 1>&2; exit 1; }

if ! kubectl get pvc -n "$RESTORE_NS" "$RESTORE_PVC" 2>/dev/null 1>&2; then
    kubectl create -f - <<EOF
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  namespace: $RESTORE_NS
  name: $RESTORE_PVC
spec:
  storageClassName: rbd
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: $VERSION_SIZE
EOF
    [[ $? != 0 ]] && exit 1
else
    PVC_SIZE=$(kubectl get pvc -n "$RESTORE_NS" "$RESTORE_PVC" -o 'jsonpath={.status.capacity.storage}')
    cat <<EOF
It seems the PVC $RESTORE_NS/$RESTORE_PVC already exists and has a size of $PVC_SIZE bytes.
Size of version requested to be restored is $VERSION_SIZE bytes.

EOF

    read -r -p 'Do you want to try to overwrite the persistent volume and lose all data in it? [y/N] ' response
    case $response in
        [yY][eE][sS]|[yY]) 
            ;;
        *)
            exit 1
            ;;
    esac
fi

# Wait for PV creation (if it does not already exist)
echo
until kubectl get pvc -n "$RESTORE_NS" "$RESTORE_PVC" -o jsonpath='{.status.phase}' | grep -q Bound; do
    echo 'Waiting for PV creation...'
    sleep 2
done

PV="$(kubectl get pvc -n "$RESTORE_NS" "$RESTORE_PVC" -o 'jsonpath={.spec.volumeName}')"
[[ ! $PV ]] && { echo "Persistent volume for PVC $RESTORE_NS/$RESTORE_PVC could not be found." 1>&2; exit 1; }

RBD_IMAGE="$(kubectl get pv "$PV" -o jsonpath='{.spec.rbd.pool}{"/"}{.spec.rbd.image}')"
[[ ! $RBD_IMAGE ]] && { echo "RBD image for PV $PV could not be found." 1>&2; exit 1; }

echo
kubectl exec -n "$BENJI_K8S_NS" "$BENJI_K8S_POD" -c benji -- benji restore --sparse --force "$VERSION" rbd:"$RBD_IMAGE"
[[ $? != 0 ]] && exit 1

echo -e '\nStarting test pod, volume is mounted at /volume.'
kubectl run -n "$RESTORE_NS" benji-k8s-restore-$$ --image elementalnet/benji-k8s --rm -ti --restart=Never --overrides='
{
    "spec": {
        "containers": [
            {
                "stdin": true,
                "tty": true,
                "command": [ "bash" ],
                "args": [ "-il" ],
                "name": "benji-k8s-volume-test",
                "image": "elementalnet/benji-k8s",
                "volumeMounts": [
                    {
                        "mountPath": "/volume",
                        "name": "volume"
                    }
                ]
            }
        ],
        "volumes": [
            {
                "name": "volume",
                "persistentVolumeClaim": {
                    "claimName": "'"$RESTORE_PVC"'"
                }
            }
        ]
    }
}
'
#EOF
